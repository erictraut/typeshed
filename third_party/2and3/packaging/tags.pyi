from typing import FrozenSet, Iterable, Iterator, Optional, Sequence, Tuple

PythonVersion = Sequence[int]
MacVersion = Tuple[int, int]

class Tag:
    def __init__(self, interpreter: str, abi: str, platform: str) -> None: ...
    @property
    def interpreter(self) -> str: ...
    @property
    def abi(self) -> str: ...
    @property
    def platform(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

def parse_tag(tag: str) -> FrozenSet[Tag]: ...
def cpython_tags(
    python_version: Optional[PythonVersion] = ...,
    abis: Optional[Iterable[str]] = ...,
    platforms: Optional[Iterable[str]] = ...,
    **kwargs: bool,
) -> Iterator[Tag]: ...
def generic_tags(
    interpreter: Optional[str] = ...,
    abis: Optional[Iterable[str]] = ...,
    platforms: Optional[Iterable[str]] = ...,
    **kwargs: bool,
) -> Iterator[Tag]: ...
def compatible_tags(
    python_version: Optional[PythonVersion] = ..., interpreter: Optional[str] = ..., platforms: Optional[Iterable[str]] = ...
) -> Iterator[Tag]: ...
def mac_platforms(version: Optional[MacVersion] = ..., arch: Optional[str] = ...) -> Iterator[str]: ...
def interpreter_name() -> str: ...
def interpreter_version(**kwargs: bool) -> str: ...
def sys_tags(**kwargs: bool) -> Iterator[Tag]: ...
